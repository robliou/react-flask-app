{"version":3,"sources":["components/Time.js","components/DatePickerField.js","components/CustomInput.js","components/LoadingSpinnerComponent.js","components/Regression.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Time","useState","currentTime","setCurrentTime","useEffect","fetch","then","res","json","data","time","className","src","logo","alt","href","target","rel","DatePickerField","props","setFieldValue","useFormikContext","useField","field","selected","value","Date","onChange","val","name","CustomInput","label","meta","touched","error","LoadingSpinnerComponent","promiseInProgress","usePromiseTracker","LinearProgress","color","regressionSchema","yup","shape","tickerOne","required","tickerTwo","nullable","notRequired","tickerThree","tickerFour","tickerFive","begDate","typeError","endDate","when","min","Regression","rSquare","setRSquare","setErr","onSubmit","values","actions","a","handleSubmit","Promise","resolve","setTimeout","resetForm","console","log","trackPromise","method","headers","body","JSON","stringify","catch","err","alert","window","location","reload","POST","class","initialValues","date","validationSchema","errors","handleChange","isSubmitting","handleBlur","Container","id","style","background","maxWidth","Grid","container","spacing","direction","item","xs","align","htmlFor","Button","type","variant","App","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f5b23e3b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.css\";\r\n\r\nfunction Time() {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/time\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setCurrentTime(data.time);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <p>The current time is {currentTime}.</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\nimport { Formik, useField, useFormikContext } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DatePickerField = ({ ...props }) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field] = useField(props);\r\n  return (\r\n    <DatePicker\r\n      {...field}\r\n      {...props}\r\n      selected={(field.value && new Date(field.value)) || null}\r\n      onChange={(val) => {\r\n        setFieldValue(field.name, val);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DatePickerField;\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\n\r\nconst CustomInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <>\r\n      <label>{label}</label>\r\n      <input\r\n        {...field}\r\n        {...props}\r\n        className={meta.touched && meta.error ? \"input-error\" : \"\"}\r\n      />\r\n      {meta.touched && meta.error && <div className=\"error\">{meta.error}</div>}\r\n    </>\r\n  );\r\n};\r\nexport default CustomInput;\r\n","import React, { Component } from \"react\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport { LinearProgress } from \"@mui/material\";\r\n\r\nexport const LoadingSpinnerComponent = (props) => {\r\n  const { promiseInProgress } = usePromiseTracker();\r\n\r\n  return (\r\n    <div>\r\n      {promiseInProgress === true ? <LinearProgress color=\"secondary\" /> : null}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport DatePickerField from \"./DatePickerField\";\r\nimport CustomInput from \"./CustomInput\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"react-datepicker/dist/\";\r\nimport \"../styles/Regression.css\";\r\n\r\nimport { Grid, Button, Container, LinearProgress } from \"@mui/material\";\r\nimport { TextField } from \"formik-mui\";\r\n\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nimport { LoadingSpinnerComponent } from \"./LoadingSpinnerComponent\";\r\n\r\nconst regressionSchema = yup.object().shape({\r\n  tickerOne: yup.string().required(),\r\n  tickerTwo: yup.string().nullable().notRequired(),\r\n  tickerThree: yup.string(),\r\n  tickerFour: yup.string(),\r\n  tickerFive: yup.string(),\r\n  begDate: yup\r\n    .date()\r\n    .nullable()\r\n    .typeError(\"Start date is required\")\r\n    .required(\"Start Date is required\"),\r\n\r\n  endDate: yup\r\n    .date()\r\n    .nullable()\r\n    .when(\r\n      \"begDate\",\r\n      (begDate, yup) =>\r\n        begDate && yup.min(begDate, \"End date cannot be before start time\")\r\n    )\r\n    .required(\"End Date is required\")\r\n    .typeError(\"Enter a value End date\"),\r\n});\r\n\r\nconst Regression = () => {\r\n  const [tickerOne, setTickerOne] = useState(\"\");\r\n  const [tickerTwo, setTickerTwo] = useState(\"\");\r\n  const [begDate, setBegDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [rSquare, setRSquare] = useState(\"\");\r\n  const [err, setErr] = useState(\"\");\r\n\r\n  function POST(data) {\r\n    trackPromise(\r\n      fetch(\"/api/regression\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .catch((err) => {\r\n          setErr(JSON.stringify(err));\r\n          alert(\r\n            \"Error: You have entered parameters that are invalid. Please ensure that your tickers are correct, and that dates selected are valid for the life of the asset and try again.\"\r\n          );\r\n          //Adding this error and then showing below; attempting to catch errors.\r\n          //JSON.stringify(err) is required because React cannot make an object a child, but a string is OK.\r\n          //Problem is if we have an error, the whole cain breaks down, and nothing is rendered. So, still need form val.\r\n          window.location.reload();\r\n        })\r\n        .then((data) => {\r\n          setRSquare(data.rSquare);\r\n        })\r\n    );\r\n  }\r\n\r\n  const onSubmit = async (values, actions) => {\r\n    handleSubmit(values);\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    actions.resetForm();\r\n  };\r\n\r\n  const handleSubmit = ({\r\n    tickerOne,\r\n    tickerTwo,\r\n    tickerThree,\r\n    tickerFour,\r\n    tickerFive,\r\n    begDate,\r\n    endDate,\r\n  }) => {\r\n    let data = {\r\n      tickerOne: tickerOne,\r\n      tickerTwo: tickerTwo,\r\n      tickerThree: tickerThree,\r\n      tickerFour: tickerFour,\r\n      tickerFive: tickerFive,\r\n      begDate: begDate,\r\n      endDate: endDate,\r\n    };\r\n    console.log(\"this is data object\", data);\r\n\r\n    POST(data);\r\n  };\r\n\r\n  /*   const LoadingIndicator = (props) => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    return promiseInProgress && <h1>Hey some async call in progress ! </h1>;\r\n  };\r\n */\r\n\r\n  return (\r\n    <div class=\"container-Sell\">\r\n      {/*       <h2 class=\"Headline\">Enter regression variables</h2>\r\n       */}{\" \"}\r\n      <br></br>\r\n      <Formik\r\n        initialValues={{\r\n          begDate: \"\",\r\n          endDate: \"\",\r\n          tickerOne: \"\",\r\n          tickerTwo: \"\",\r\n          tickerThree: \"\",\r\n          tickerFour: \"\",\r\n          tickerFive: \"\",\r\n          date: \"\",\r\n        }}\r\n        validationSchema={regressionSchema}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          isSubmitting,\r\n          resetForm,\r\n        }) => (\r\n          <Form>\r\n            {isSubmitting && <div>Submitting, please be patient...</div>}\r\n            <Container\r\n              id=\"regContainer\"\r\n              style={{ background: \"#1a202c\" }}\r\n              maxWidth=\"sm\"\r\n            >\r\n              <Grid container spacing={3} direction=\"column\">\r\n                <Grid item xs={12} align=\"center\">\r\n                  <h1>Yahoo! Finance - Multiple Regression Engine</h1>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"tickerOne\">Enter ticker #1 (required) </label>\r\n                  <CustomInput\r\n                    id=\"tickerOne\"\r\n                    name=\"tickerOne\"\r\n                    value={values.tickerOne}\r\n                    onChange={handleChange(\"tickerOne\")}\r\n                    /*                   onBlur={handleBlur(\"tickerOne\")}\r\n                     */\r\n                  />\r\n                  <div>{errors.tickerOne}</div>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"tickerTwo\">Enter ticker #2 (optional) </label>\r\n                  <Field\r\n                    id=\"tickerTwo\"\r\n                    name=\"tickerTwo\"\r\n                    value={values.tickerTwo}\r\n                    onChange={handleChange(\"tickerTwo\")}\r\n                    /*                   onBlur={handleBlur(\"tickerTwo\")}\r\n                     */\r\n                  />\r\n                  <div>{touched.tickerTwo && errors.tickerTwo}</div>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"tickerThree\">\r\n                    Enter ticker #3 (optional){\" \"}\r\n                  </label>\r\n                  <Field\r\n                    id=\"tickerThree\"\r\n                    name=\"tickerThree\"\r\n                    value={values.tickerThree}\r\n                    onChange={handleChange(\"tickerThree\")}\r\n                    /*                   onBlur={handleBlur(\"tickerTwo\")}\r\n                     */\r\n                  />\r\n                  <div>{touched.tickerThree && errors.tickerThree}</div>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"tickerFour\">\r\n                    Enter ticker #4 (optional){\" \"}\r\n                  </label>\r\n                  <Field\r\n                    id=\"tickerFour\"\r\n                    name=\"tickerFour\"\r\n                    value={values.tickerFour}\r\n                    onChange={handleChange(\"tickerFour\")}\r\n                    /*                   onBlur={handleBlur(\"tickerTwo\")}\r\n                     */\r\n                  />\r\n                  <div>{touched.tickerFour && errors.tickerFour}</div>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"tickerFive\">\r\n                    Enter ticker #5 (optional){\" \"}\r\n                  </label>\r\n                  <Field\r\n                    id=\"tickerFive\"\r\n                    name=\"tickerFive\"\r\n                    label=\"tickerFive\"\r\n                    value={values.tickerFive}\r\n                    onChange={handleChange(\"tickerFive\")}\r\n                  />\r\n                  <div>{touched.tickerFive && errors.tickerFive}</div>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"begDate\">Enter beginning date</label>\r\n                  <br></br>\r\n                  <DatePickerField\r\n                    value={values.begDate}\r\n                    name=\"begDate\"\r\n                    label=\"begDate\"\r\n                    selected={begDate}\r\n                    onChange={handleChange(\"begDate\")}\r\n                    /*                   onBlur={handleBlur(\"begDate\")}\r\n                     */\r\n                  />\r\n                  {touched.begDate && errors.begDate && (\r\n                    <div>{errors.begDate}</div>\r\n                  )}\r\n                </Grid>\r\n\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"endDate\">Enter ending date</label>\r\n                  <DatePickerField\r\n                    value={values.endDate}\r\n                    name=\"endDate\"\r\n                    label=\"endDate\"\r\n                    selected={endDate}\r\n                    onChange={handleChange(\"endDate\")}\r\n                    /*                   onBlur={handleBlur(\"endDate\")}\r\n                     */\r\n                  />\r\n                  {touched.endDate && errors.endDate && (\r\n                    <div>{errors.endDate}</div>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={6} align=\"center\">\r\n                  <label htmlFor=\"message\">This is the rSquared: </label>\r\n                  <LoadingSpinnerComponent />\r\n\r\n                  <h2>{rSquare}</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} align=\"center\">\r\n                  <div id=\"buttons\">\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n            </Container>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Regression;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Time from \"./components/Time\";\r\nimport Regression from \"./components/Regression\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Time />} />\r\n        <Route path=\"/regression\" element={<Regression />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}